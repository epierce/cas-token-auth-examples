create or replace
package cas_token_auth as
  /**
   * This package is provides methods to create tokens that can be used with the
   * CAS Token Authentication Module (https://github.com/epierce/cas-server-extension-token).
   * The tokens generated by this package have an upper limit of 32767 bytes. In fact, you should
   * keep your token size, with JSON formatting, under 32751 bytes to allow room for encryptiong.
   * But, seriously, if you have a token that large anyway, you should reconsider what you are putting
   * in your token.
   */

  -- The following two variables should be set to the details of your token as listed on the
  -- remote CAS server.
  token_key_name  varchar2(128) := 'example_key';
  token_key       varchar2(16)  := '{Q1YWDC]8,>:[>@H';

  -- The following two variables should be set to match your CAS server details.
  cas_base_url  varchar2(2048)  := 'https://cas.example.com'; -- no trailing slash
  cas_login_url varchar2(32)    := '/login'; -- use leading slash

  /**
   * Given a token as generated with `get_token`, this function will return
   * an encrypted token as a Base64 encoded string.
   *
   * @param in_token A JSON object as returned from `get_token`.
   *
   * @returns A Base64 encoded token that has been AES-128 encrypted.
   */
  function encrypt_token(in_token in json) return varchar2;

  /**
   * Generate a token from a given details object.
   *
   * @param in_details An instance of `cas_token_details` to add to a token.
   *
   * @returns A JSON object that represents a CAS authorization token.
   */
  function get_token(in_details in cas_token_details) return json;

  /**
   * Returns a URL for the given token, username, and service URL. This URL is what one would use
   * to login to CAS and then be redirected to a service after successful authentication. The service URL
   * is a valid service URL that has been registered with the remote CAS server. The username is the username
   * of the person we are attempting to login with the token.
   *
   * @param in_token The token as returned by `get_token`.
   * @param in_username The username of the account we are trying to authorize via the token.
   * @param in_service_url A valid service URL that has been registered with the remote CAS server.
   *
   * @returns A URL that has all components properly encoded. This URL can be used to foward the user
   *          on to the CAS server for authorization, and, in turn, the destination service.
   */
  function get_url(in_token in json, in_username in varchar2, in_service_url in varchar2) return varchar2;

end cas_token_auth;